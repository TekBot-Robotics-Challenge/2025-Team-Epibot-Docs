import{_ as s,c as a,o as e,ag as r}from"./chunks/framework.C_7JoTpM.js";const h=JSON.parse('{"title":"FINAL TEST - THE CONVEYOR: Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"week4/pole-electronic/index.md","filePath":"week4/pole-electronic/index.md"}'),t={name:"week4/pole-electronic/index.md"};function i(o,n,l,p,c,d){return e(),a("div",null,n[0]||(n[0]=[r(`<h1 id="final-test-the-conveyor-documentation" tabindex="-1">FINAL TEST - THE CONVEYOR: Documentation <a class="header-anchor" href="#final-test-the-conveyor-documentation" aria-label="Permalink to &quot;FINAL TEST - THE CONVEYOR: Documentation&quot;">​</a></h1><p>In this documentation:</p><ul><li><a href="#1-general-context">1. General Context</a></li><li><a href="#2-description-of-components">2. Description of components</a></li><li><a href="#3-computer-aided-design">3. Computer-Aided Design</a></li><li><a href="#4-conveyor-system-logic">4. Conveyor System Logic</a></li><li><a href="#5-the-arduino-code">5. The Arduino Code</a></li><li><a href="#6-assembly-of-components">6. Assembly of components</a></li><li><a href="#7-testing-the-project">7. Testing the project</a></li><li><a href="#8-helpful-ressources">8. Helpful Ressources</a></li></ul><h2 id="_1-general-context" tabindex="-1">1. General Context <a class="header-anchor" href="#_1-general-context" aria-label="Permalink to &quot;1. General Context&quot;">​</a></h2><p>This test introduces us to a fun and innovative way to make a <strong>7-segment display</strong> using <strong>servo motors</strong> instead of lights (LEDs). Each segment (the bars that make up each digit) is moved by a small servo motor. The display shows the numbers from 0 to 9, then from 9 to 0, changing every second.</p><h2 id="_2-description-of-components" tabindex="-1">2. Description of components <a class="header-anchor" href="#_2-description-of-components" aria-label="Permalink to &quot;2. Description of components&quot;">​</a></h2><h3 id="a-arduino-nano" tabindex="-1">a. Arduino Nano <a class="header-anchor" href="#a-arduino-nano" aria-label="Permalink to &quot;a. Arduino Nano&quot;">​</a></h3><p>The <a href="https://docs.arduino.cc/hardware/nano/" target="_blank" rel="noreferrer">Arduino Nano</a> is a compact microcontroller board based on the ATmega328P, suitable for embedded applications and easy prototyping. It features 14 digital input/output pins (of which 6 can be used as PWM outputs), 8 analog inputs, a mini USB port for programming and power, and supports a voltage range of 7-12V input. Its small size (approximately 1.8 x 0.7 inches) and compatibility with the Arduino IDE make it ideal for DIY electronics, robotics, and IoT applications where space is limited and reliable performance is needed.</p><p align="center"><img src="https://github.com/user-attachments/assets/82b01225-74db-4d1b-94b2-5a4e325868f8" width="500"></p><h3 id="b-stepper-motor-nema-17" tabindex="-1">b. Stepper Motor Nema 17 <a class="header-anchor" href="#b-stepper-motor-nema-17" aria-label="Permalink to &quot;b. Stepper Motor Nema 17&quot;">​</a></h3><p>The <a href="https://pages.pbclinear.com/rs/909-BFY-775/images/Data-Sheet-Stepper-Motor-Support.pdf" target="_blank" rel="noreferrer">NEMA 17</a> stepper motor is a compact and commonly used motor in devices like 3D printers and CNC machines. It has a standard size, delivers precise movement, and is reliable for projects that need controlled motion. Its popularity comes from its balance of size, power, and ease of integration with various electronics.</p><p align="center"><img src="https://github.com/user-attachments/assets/2af4bb93-6dbb-43fc-8ede-ca9ad9acb88e" width="500"></p><h3 id="c-pololu-a4988-stepper-motor-driver" tabindex="-1">c. Pololu A4988 Stepper Motor Driver <a class="header-anchor" href="#c-pololu-a4988-stepper-motor-driver" aria-label="Permalink to &quot;c. Pololu A4988 Stepper Motor Driver&quot;">​</a></h3><p>The <a href="https://www.pololu.com/file/0j450/a4988_dmos_microstepping_driver_with_translator.pdf" target="_blank" rel="noreferrer">Pololu A4988</a> is a microstepping driver for controlling bipolar stepper motors. It enables the Arduino to send signals for step and direction, translating them into precise motor motion. It features adjustable current control, over-temperature and over-current protection and also supports full, half, quarter, eighth, and sixteenth step modes.</p><p align="center"><img src="https://github.com/user-attachments/assets/7ba5f45a-55bd-456e-ae1c-5ccd178bf0c3" width="500"></p><h3 id="d-ky-008-laser-transmitter" tabindex="-1">d. KY-008 Laser Transmitter <a class="header-anchor" href="#d-ky-008-laser-transmitter" aria-label="Permalink to &quot;d. KY-008 Laser Transmitter&quot;">​</a></h3><p>The <a href="https://eclass.uth.gr/modules/document/file.php/E-CE_U_269/Sensors/Sensors_%20Datasheets/KY-008-AZ-Delivery.pdf" target="_blank" rel="noreferrer">KY-008</a> is a small laser emitter module used for creating a focused light beam. It features a 650nm red <a href="https://en.wikipedia.org/wiki/Laser_diode" target="_blank" rel="noreferrer">laser diode</a> that emits a focused beam, making it suitable for applications such as simple laser pointers, line detection, and light communication. Combined with a photoresistor, it can detect when an object passes through the beam (used as a tripwire sensor).</p><p align="center"><img src="https://github.com/user-attachments/assets/0ccaf429-2387-4a03-8d5d-050d3f23fe32" width="500"></p><h3 id="e-photoresistor" tabindex="-1">e. Photoresistor <a class="header-anchor" href="#e-photoresistor" aria-label="Permalink to &quot;e. Photoresistor&quot;">​</a></h3><p>A <a href="https://en.wikipedia.org/wiki/Photoresistor" target="_blank" rel="noreferrer">photoresistor</a>, or Light Dependent Resistor (LDR), changes its resistance based on light intensity. It’s used for detecting the presence or absence of objects, or measuring ambient light. It is typically use to detect when an object interrupts a light beam.</p><p align="center"><img src="https://github.com/user-attachments/assets/9f7ca8d1-7d1e-4e5c-b276-5910bf914244" width="500"></p><h3 id="f-tcs34725-color-sensor" tabindex="-1">f. TCS34725 Color Sensor <a class="header-anchor" href="#f-tcs34725-color-sensor" aria-label="Permalink to &quot;f. TCS34725 Color Sensor&quot;">​</a></h3><p>The <a href="https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf" target="_blank" rel="noreferrer">TCS34725</a> is a digital color sensor that can detect RGB and clear light values. It’s used to identify the color of objects passing in front of it. It features onboard IR blocking filter, I2C interface and high sensitivity which enables for better precision.</p><p align="center"><img src="https://github.com/user-attachments/assets/c4f0b689-3a66-4d25-8279-fc30652a6c73" width="500"></p><h3 id="g-our-custom-power-supply" tabindex="-1">g. Our custom power supply <a class="header-anchor" href="#g-our-custom-power-supply" aria-label="Permalink to &quot;g. Our custom power supply&quot;">​</a></h3><p>To power up our setup, we should build a power supply that will provide safe and sufficient voltage to all the components. For that, we will use:</p><ul><li>Four 3.7V lithium batteries to supply 14.8V</li></ul><h2 id="_3-computer-aided-design" tabindex="-1">3. Computer-Aided Design <a class="header-anchor" href="#_3-computer-aided-design" aria-label="Permalink to &quot;3. Computer-Aided Design&quot;">​</a></h2><p>We used the KiCad EDA (<em>download <a href="https://www.kicad.org/" target="_blank" rel="noreferrer">here</a></em>) to design the schematic as well as the PCB for this project. Find its official documentation <a href="https://docs.kicad.org/" target="_blank" rel="noreferrer">here</a>.</p><p>To design the individual segments and model the housing that encloses all the circuitry, we used Solidworks (<em>download <a href="https://www.solidworks.com/sw/support/downloads.htm" target="_blank" rel="noreferrer">here</a></em>). Learn more about this software <a href="https://help.solidworks.com/" target="_blank" rel="noreferrer">here</a>.</p><h3 id="a-kicad-schematic-diagram" tabindex="-1">a. KiCad schematic diagram <a class="header-anchor" href="#a-kicad-schematic-diagram" aria-label="Permalink to &quot;a. KiCad schematic diagram&quot;">​</a></h3><p>The schematic is divided into two main blocks:</p><p><img src="" alt="The Schematic"></p><h3 id="b-printed-circuit-board-pcb-design" tabindex="-1">b. Printed Circuit Board (PCB) design <a class="header-anchor" href="#b-printed-circuit-board-pcb-design" aria-label="Permalink to &quot;b. Printed Circuit Board (PCB) design&quot;">​</a></h3><ul><li>PCB overview in the KiCad PCB editor</li></ul><p align="center"><img src="" width="1000"></p><h2 id="_4-conveyor-system-logic" tabindex="-1">4. Conveyor System Logic <a class="header-anchor" href="#_4-conveyor-system-logic" aria-label="Permalink to &quot;4. Conveyor System Logic&quot;">​</a></h2><h4 id="object-detection" tabindex="-1">Object Detection <a class="header-anchor" href="#object-detection" aria-label="Permalink to &quot;Object Detection&quot;">​</a></h4><ul><li>The KY-008 laser module emits a beam aimed at the first photoresistor (LDR1).</li><li>When an object interrupts the beam, LDR1 detects a drop in light, signaling the Arduino that an object is present at the entry point.</li><li>The second photoresistor (LDR2) is positioned at another checkpoint (such as near the color sensor or at the exit). It detects when the object reaches that point, allowing for more precise control and sequencing.</li></ul><h4 id="color-detection" tabindex="-1">Color Detection <a class="header-anchor" href="#color-detection" aria-label="Permalink to &quot;Color Detection&quot;">​</a></h4><ul><li>The conveyor moves the object to the position of the TCS34725 color sensor (confirmed by LDR2 if positioned there).</li><li>The Arduino reads color data from the sensor to identify the color of the object.</li></ul><h4 id="positioning" tabindex="-1">Positioning <a class="header-anchor" href="#positioning" aria-label="Permalink to &quot;Positioning&quot;">​</a></h4><ul><li>The Nema 17 stepper motor, controlled by the A4988 driver, moves the conveyor belt.</li><li>The Arduino sends step and direction signals to the A4988 to rotate the motor and advance the belt.</li></ul><h4 id="control-loop" tabindex="-1">Control Loop <a class="header-anchor" href="#control-loop" aria-label="Permalink to &quot;Control Loop&quot;">​</a></h4><ul><li>The Arduino receives input from both photoresistors: <ul><li>LDR1 (entry): object present/absent at the entry.</li><li>LDR2 (checkpoint): object present/absent at the color sensor or exit.</li></ul></li><li>When LDR1 detects an object, the conveyor advances the object to the checkpoint.</li><li>When LDR2 detects the object&#39;s arrival, the conveyor stops, reads the color, then restarts for the next object.</li><li>This dual-sensor approach increases accuracy and enables additional sorting or processing logic.</li></ul><h2 id="_5-the-arduino-code" tabindex="-1">5. The Arduino Code <a class="header-anchor" href="#_5-the-arduino-code" aria-label="Permalink to &quot;5. The Arduino Code&quot;">​</a></h2><h3 id="setting-up" tabindex="-1">Setting up <a class="header-anchor" href="#setting-up" aria-label="Permalink to &quot;Setting up&quot;">​</a></h3><p>Download the Arduino IDE using this <a href="https://www.arduino.cc/" target="_blank" rel="noreferrer">link</a>. It&#39;s a software that will allow you to run and upload your code to the MCUs. Once the installation is done, we can set up by installing the necessary libraries via the <strong>Library Manager</strong> in the Arduino IDE (<em>make sure that you also install their dependencies when prompted to</em>). We will need the following Arduino libraries:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* ========= REQUIRED LIBRAIRIES ============== */</span></span>
<span class="line"><span>#include &lt;Adafruit_TCS34725.h&gt;</span><span> // Library for our color sensor</span></span>
<span class="line"><span>#include &lt;Wire.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="global-variables-and-constants-declarations" tabindex="-1">Global variables and constants declarations <a class="header-anchor" href="#global-variables-and-constants-declarations" aria-label="Permalink to &quot;Global variables and constants declarations&quot;">​</a></h3><ul><li>Constants representing the A4988 driver pins:</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// === A4988 driver pins ===</span></span>
<span class="line"><span>#define stepPin 3</span><span> // connected to Arduino D3</span></span>
<span class="line"><span>#define dirPin 4</span><span> // connected to Arduino D4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>Constants representing the Photoresistors and Laser pins:</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// === Photoresistors and Laser pins ===</span></span>
<span class="line"><span>#define laserPin 5</span><span> // KY-008 laser emitter</span></span>
<span class="line"><span>#define photo1 A0</span><span>  // First photoresistor</span></span>
<span class="line"><span>#define photo2 A1</span><span>  // Second photoresistor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Photoresistor&#39;s resistance value threshold to detect the presence of an object</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Threshold to detect if an object is blocking the beam</span></span>
<span class="line"><span>const int detectionThreshold = 500;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Declaration of TCS34725 color sensor: <code>Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);</code></li></ul><h3 id="setup-function" tabindex="-1">setup() function <a class="header-anchor" href="#setup-function" aria-label="Permalink to &quot;setup() function&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void setup()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  Serial.begin(115200); // start the serial monitor at 115200 bauds</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Configuration for stepper motor</span></span>
<span class="line"><span>  pinMode(stepPin, OUTPUT);</span></span>
<span class="line"><span>  pinMode(dirPin, OUTPUT);</span></span>
<span class="line"><span>  digitalWrite(dirPin, HIGH);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Configuration for Laser and photoresistors</span></span>
<span class="line"><span>  pinMode(laserPin, OUTPUT);</span></span>
<span class="line"><span>  digitalWrite(laserPin, HIGH); // Turn on laser</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Initialization of our color sensor</span></span>
<span class="line"><span>  if (!tcs.begin()) // initialization failed</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    // print to the serial monitor for debugging</span></span>
<span class="line"><span>    Serial.println(&quot;Color sensor setup failed !&quot;);</span></span>
<span class="line"><span>    while (true); // Loop forever, don&#39;t proceed</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  if (!confirm_connect()) // ros and arduino connection failed</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    // print to the serial monitor for debugging</span></span>
<span class="line"><span>    Serial.println(&quot;Connection failure !&quot;);</span></span>
<span class="line"><span>    while (true); // Loop forever, don&#39;t proceed</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="custom-functions" tabindex="-1">Custom functions <a class="header-anchor" href="#custom-functions" aria-label="Permalink to &quot;Custom functions&quot;">​</a></h3><h4 id="function-to-read-from-ros-using-the-serial-monitor" tabindex="-1">Function to read from ROS using the serial monitor: <a class="header-anchor" href="#function-to-read-from-ros-using-the-serial-monitor" aria-label="Permalink to &quot;Function to read from ROS using the serial monitor:&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>String read_from_ros()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  if (Serial.available()) // check if data is available for reading</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    return Serial.readString(); // return data as string</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return &quot;&quot;; // return an empty string if no data is available</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="function-to-confirm-arduino-ros-connection" tabindex="-1">Function to confirm Arduino-ROS connection: <a class="header-anchor" href="#function-to-confirm-arduino-ros-connection" aria-label="Permalink to &quot;Function to confirm Arduino-ROS connection:&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bool confirm_connect()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  String msg = read_from_ros(); // read from ros through serial</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // if connection with ROS is successful, send confirmation message to ros </span></span>
<span class="line"><span>  if (msg == &quot;ROS CONNECTED\\r\\n&quot;)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    // print to the serial monitor for arduino to ros communication</span></span>
<span class="line"><span>    Serial.println(&quot;ARDUINO CONNECTED&quot;);</span></span>
<span class="line"><span>    return true;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return false; // cannot confirm connection</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="function-to-move-the-conveyor-belt" tabindex="-1">Function to move the conveyor belt: <a class="header-anchor" href="#function-to-move-the-conveyor-belt" aria-label="Permalink to &quot;Function to move the conveyor belt:&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void startConveyor()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  String msg = read_from_ros(); // read from ros through serial</span></span>
<span class="line"><span>  int i = 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // if ROS hasn&#39;t signaled to start conveyor, don&#39;t proceed</span></span>
<span class="line"><span>  if (msg != &quot;MOTOR ON\\r\\n&quot;)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  while (i &lt; 200) // Move 200 steps, partial rotation</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    digitalWrite(stepPin, HIGH);</span></span>
<span class="line"><span>    delayMicroseconds(1000); // control speed</span></span>
<span class="line"><span>    digitalWrite(stepPin, LOW);</span></span>
<span class="line"><span>    delayMicroseconds(1000);</span></span>
<span class="line"><span>    i++;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  // Let ROS know object reached end of conveyor belt</span></span>
<span class="line"><span>  if (i == 200 - 1)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    Serial.println(&quot;OK&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="function-to-stop-the-conveyor-belt" tabindex="-1">Function to stop the conveyor belt: <a class="header-anchor" href="#function-to-stop-the-conveyor-belt" aria-label="Permalink to &quot;Function to stop the conveyor belt:&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void stopConveyor()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // Just for logic</span></span>
<span class="line"><span>  // Motor stops itself automatically when no longer receiving pulses</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="function-for-detecting-an-object-s-color-through-the-tcs34725-color-sensor" tabindex="-1">Function for detecting an object&#39;s color through the TCS34725 color sensor: <a class="header-anchor" href="#function-for-detecting-an-object-s-color-through-the-tcs34725-color-sensor" aria-label="Permalink to &quot;Function for detecting an object&#39;s color through the TCS34725 color sensor:&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// === Color detection via TCS34725 ===</span></span>
<span class="line"><span>String detectColor()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // Read raw red, green, blue and clear values</span></span>
<span class="line"><span>  uint16_t red, green, blue, neutral;</span></span>
<span class="line"><span>  tcs.getRawData(&amp;red, &amp;green, &amp;blue, &amp;neutral);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Normalize color values for fair comparison</span></span>
<span class="line"><span>  float sum = red + green + blue;</span></span>
<span class="line"><span>  float R = red / sum;</span></span>
<span class="line"><span>  float G = green / sum;</span></span>
<span class="line"><span>  float B = blue / sum;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // ======== Color dectection logic ========</span></span>
<span class="line"><span>  if (R &gt; 0.35 &amp;&amp; G &gt; 0.35 &amp;&amp; B &lt; 0.25)</span></span>
<span class="line"><span>    return &quot;YELLOW&quot;;</span></span>
<span class="line"><span>  else if (R &gt; G &amp;&amp; R &gt; B)</span></span>
<span class="line"><span>    return &quot;RED&quot;;</span></span>
<span class="line"><span>  else if (G &gt; R &amp;&amp; G &gt; B)</span></span>
<span class="line"><span>    return &quot;GREEN&quot;;</span></span>
<span class="line"><span>  else if (B &gt; R &amp;&amp; B &gt; G)</span></span>
<span class="line"><span>    return &quot;BLUE&quot;;</span></span>
<span class="line"><span>  else</span></span>
<span class="line"><span>    return &quot;UNKNOWN&quot;; // Color is not among the supported ones</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="loop-function" tabindex="-1">loop() function <a class="header-anchor" href="#loop-function" aria-label="Permalink to &quot;loop() function&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void loop()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  // Read light levels from both photoresistors</span></span>
<span class="line"><span>  int value1 = analogRead(photo1); // read from first photoresistor</span></span>
<span class="line"><span>  int value2 = analogRead(photo2); // read from second photoresistor</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Check if laser beam is blocked (object detected)</span></span>
<span class="line"><span>  if (value1 &lt; detectionThreshold || value2 &lt; detectionThreshold)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    delay(800); // Time for object detection by color sensor</span></span>
<span class="line"><span>    String objectColor = detectColor(); // detect the object&#39;s color</span></span>
<span class="line"><span>    // print to the serial monitor for arduino to ros communication</span></span>
<span class="line"><span>    Serial.print(&quot;GARBAGE&quot;); Serial.println(objectColor);</span></span>
<span class="line"><span>    startConveyor(); // move stepper motor</span></span>
<span class="line"><span>    stopConveyor();</span></span>
<span class="line"><span>    delay(1500); // 1.5 seconds pause before next detection</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Serial.println(&quot;NONE&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><em>The full code is available to download <a href="https://raw.githubusercontent.com/TekBot-Robotics-Challenge/2025-Team-Epibot-Docs/refs/heads/main/docs/week3/pole-electronic/code/servo_displayer.ino" target="_blank" rel="noreferrer">here</a></em>.</p><h2 id="_6-assembly-of-components" tabindex="-1">6. Assembly of components <a class="header-anchor" href="#_6-assembly-of-components" aria-label="Permalink to &quot;6. Assembly of components&quot;">​</a></h2><h2 id="_7-testing-and-validation" tabindex="-1">7. Testing and Validation <a class="header-anchor" href="#_7-testing-and-validation" aria-label="Permalink to &quot;7. Testing and Validation&quot;">​</a></h2><p>Before uploading the Arduino program, you need to do some final checks:</p><ul><li>Visually inspect and check all connections to prevent short circuits.</li><li>Apply power gradually while monitoring the LEDs and voltage rails.</li></ul><p>After performing these steps, upload <a href="#5-the-arduino-code">The Arduino Code</a>, and observe.</p><h2 id="_8-helpful-ressources" tabindex="-1">8. helpful Ressources <a class="header-anchor" href="#_8-helpful-ressources" aria-label="Permalink to &quot;8. helpful Ressources&quot;">​</a></h2><ul><li><a href="https://www.kicad.org/" target="_blank" rel="noreferrer">Download KiCad</a></li><li><a href="https://www.solidworks.com/sw/support/downloads.htm" target="_blank" rel="noreferrer">Download SolidWorks</a></li><li><a href="https://www.youtube.com/watch?v=9qZUjEsVWts" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=9qZUjEsVWts</a></li><li><a href="https://www.youtube.com/watch?v=WLVfZXxpHYI" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=WLVfZXxpHYI</a></li><li><a href="https://www.youtube.com/watch?v=lkyUqMVJBQ0" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=lkyUqMVJBQ0</a></li></ul>`,80)]))}const b=s(t,[["render",i]]);export{h as __pageData,b as default};
