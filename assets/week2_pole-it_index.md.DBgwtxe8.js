import{_ as a,c as n,o as i,ag as e,j as t}from"./chunks/framework.C_7JoTpM.js";const m=JSON.parse('{"title":"ROS2 Test Project: Sensor Data Evaluation","description":"","frontmatter":{},"headers":[],"relativePath":"week2/pole-it/index.md","filePath":"week2/pole-it/index.md"}'),r={name:"week2/pole-it/index.md"};function l(o,s,p,h,c,d){return i(),n("div",null,s[0]||(s[0]=[e('<h1 id="ros2-test-project-sensor-data-evaluation" tabindex="-1">ROS2 Test Project: Sensor Data Evaluation <a class="header-anchor" href="#ros2-test-project-sensor-data-evaluation" aria-label="Permalink to &quot;ROS2 Test Project: Sensor Data Evaluation&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>This test of the second week is an introduction to the ROS2 framework. The objective is to get hands-on experience with ROS2&#39;s core communication concepts, including <strong>nodes</strong>, <strong>topics</strong>, and the <strong>publish/subscribe</strong> model. The test consists of implementing a ROS2 package with two main components: a <em>publisher node</em> and a <em>subscriber node</em>, using both <strong>C++</strong> or <strong>Python</strong>.</p><h2 id="objectives-of-the-test" tabindex="-1">Objectives of the Test <a class="header-anchor" href="#objectives-of-the-test" aria-label="Permalink to &quot;Objectives of the Test&quot;">​</a></h2><p>The primary goal was to create a ROS2 package named <code>sensor_data_evaluation</code> that includes:</p><ul><li>A <strong>publisher node</strong> that generates random sensor data (temperature, humidity, and pressure) and publishes it every 0.5 seconds on a topic named <code>/sensor_data</code>.</li><li>A <strong>subscriber node</strong> that listens to this topic and checks whether the received data falls within predefined valid ranges: <ul><li>Temperature: 15°C to 35°C</li><li>Humidity: 30% to 70%</li><li>Pressure: 950 hPa to 1050 hPa Additionally, a <strong>launch file</strong> was required to run both nodes simultaneously.</li></ul></li></ul><h2 id="skills-and-concepts-learned" tabindex="-1">Skills and Concepts Learned <a class="header-anchor" href="#skills-and-concepts-learned" aria-label="Permalink to &quot;Skills and Concepts Learned&quot;">​</a></h2><p>Through this test, we learn how to :</p><ul><li>Creat and organize a ROS2 package.</li><li>Write ROS2 nodes in C++.</li><li>Publish and subscribe to topics.</li><li>Work with custom data structures and message types.</li><li>Use a launch files to manage and execute multiple nodes.</li></ul><h1 id="bonus-multimachine-communication-with-ros2-fast-dds" tabindex="-1">Bonus: Multimachine Communication with ROS2 (Fast DDS) <a class="header-anchor" href="#bonus-multimachine-communication-with-ros2-fast-dds" aria-label="Permalink to &quot;Bonus: Multimachine Communication with ROS2 (Fast DDS)&quot;">​</a></h1>',10),t("iframe",{src:"https://player.vimeo.com/video/1094755988?h=f0321cf5cd&badge=0&autopause=0&player_id=0&app_id=58479",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share",style:{top:"0",left:"0",width:"100%",height:"300px"},title:"Multi-machines communication"},null,-1),e(`<h2 id="introduction-1" tabindex="-1">Introduction <a class="header-anchor" href="#introduction-1" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>As a bonus to this test, we explore <strong>Multimachine communication using ROS2</strong>, where ROS2 nodes can run on different physical machines and communicate with each other over a local network. This is made possible by <strong>DDS (Data Distribution Service)</strong>, which is the default middleware in ROS2 (Fast DDS). It allows <strong>decentralized</strong>, <strong>serverless</strong> communication through a <strong>publish/subscribe model</strong>.</p><h2 id="concepts-of-dds-in-ros2" tabindex="-1">Concepts of DDS in ROS2 <a class="header-anchor" href="#concepts-of-dds-in-ros2" aria-label="Permalink to &quot;Concepts of DDS in ROS2&quot;">​</a></h2><ul><li><strong>Automatic Discovery</strong>: Nodes automatically detect each other on the network. There is no need for a central master or <code>roscore</code>.</li><li><strong>Direct Communication</strong>: Messages are sent directly from the publisher to the subscriber.</li><li><strong>Quality of Service (QoS)</strong>: The behavior of message transmission (reliability, persistence, frequency) can be finely tuned using QoS profiles.</li></ul><h2 id="steps-to-set-up-multimachine-ros2-communication" tabindex="-1">Steps to Set Up Multimachine ROS2 Communication <a class="header-anchor" href="#steps-to-set-up-multimachine-ros2-communication" aria-label="Permalink to &quot;Steps to Set Up Multimachine ROS2 Communication&quot;">​</a></h2><h3 id="_1-ensure-all-devices-are-on-the-same-network" tabindex="-1">1. Ensure All Devices Are on the Same Network <a class="header-anchor" href="#_1-ensure-all-devices-are-on-the-same-network" aria-label="Permalink to &quot;1. Ensure All Devices Are on the Same Network&quot;">​</a></h3><p>Make sure that all the computers (e.g., PC1 and PC2) are connected to the <strong>same local network</strong> (Wi-Fi or Ethernet). You can verify this by checking that their IP addresses are in the same subnet.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># On each machine, get your IP address:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # or use \`ifconfig\` if available</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-network-connectivity" tabindex="-1">2 Network Connectivity <a class="header-anchor" href="#_2-network-connectivity" aria-label="Permalink to &quot;2 Network Connectivity&quot;">​</a></h3><p>Check that each machine can reach the other</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From PC1 to PC2:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IP_ADDRESS_OF_PC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># From PC2 to PC1:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IP_ADDRESS_OF_PC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If the ping is successful, then the machines are properly connected.</p><h3 id="_3-set-the-ros-domain-id" tabindex="-1">3. Set the ROS Domain ID <a class="header-anchor" href="#_3-set-the-ros-domain-id" aria-label="Permalink to &quot;3. Set the ROS Domain ID&quot;">​</a></h3><p>To isolate ROS2 communication, each machine must have the same ROS_DOMAIN_ID. You can set it temporarily with:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_DOMAIN_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>On PC1 (Publisher) Launch the publisher node that sends sensor data:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sensor_data_evaluation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sensor_publisher</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>On PC2 (Subscriber) Launch the subscriber node that receives and checks the data:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sensor_data_evaluation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sensor_subscriber</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>You should now see the subscriber receiving messages published from the other machine.</p><h3 id="_4-architecture-diagram" tabindex="-1">4. Architecture Diagram <a class="header-anchor" href="#_4-architecture-diagram" aria-label="Permalink to &quot;4. Architecture Diagram&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>            ┌────────────┐                          ┌────────────┐</span></span>
<span class="line"><span>            │   PC1      │                          │   PC2      │</span></span>
<span class="line"><span>            │------------│                          │------------│</span></span>
<span class="line"><span>            │ Publisher  │── /sensor_data topic ──► │ Subscriber │</span></span>
<span class="line"><span>            └────────────┘                          └────────────┘</span></span>
<span class="line"><span>                   ▲                                      ▲</span></span>
<span class="line"><span>                   │                                      │</span></span>
<span class="line"><span>                   ▼                                      ▼</span></span>
<span class="line"><span>            ┌────────────┐                          ┌────────────┐</span></span>
<span class="line"><span>            │   PC3      │                          │   ...      │</span></span>
<span class="line"><span>            │------------│                          │------------│</span></span>
<span class="line"><span>            │ Subscriber │                          │ Subscriber │</span></span>
<span class="line"><span>            └────────────┘                          └────────────┘</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     All machines on the same local network and sharing ROS_DOMAIN_ID=0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Multimachine communication in ROS2 is straightforward when the following conditions are met:</p><ul><li>All devices are on the same local network.</li><li>They share the same ROS_DOMAIN_ID.</li><li>ROS2 is installed and sourced correctly on each machine.</li><li>Firewall rules do not block DDS traffic.</li></ul><h3 id="useful-link" tabindex="-1">Useful link <a class="header-anchor" href="#useful-link" aria-label="Permalink to &quot;Useful link&quot;">​</a></h3><p><a href="https://roboticsbackend.com/ros2-multiple-machines-including-raspberry-pi/" target="_blank" rel="noreferrer">https://roboticsbackend.com/ros2-multiple-machines-including-raspberry-pi/</a></p>`,26)]))}const b=a(r,[["render",l]]);export{m as __pageData,b as default};
