import{_ as e,c as i,o as s,ag as t}from"./chunks/framework.C_7JoTpM.js";const u=JSON.parse('{"title":"RVIZ2 DOCUMENTATION","description":"","frontmatter":{},"headers":[],"relativePath":"week3/pole-it/Rviz_documentation.md","filePath":"week3/pole-it/Rviz_documentation.md"}'),n={name:"week3/pole-it/Rviz_documentation.md"};function o(l,a,r,p,d,h){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="rviz2-documentation" tabindex="-1">RVIZ2 DOCUMENTATION <a class="header-anchor" href="#rviz2-documentation" aria-label="Permalink to &quot;RVIZ2 DOCUMENTATION&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>In this part of documanetation you will find all information about RViz2 Configuration and Visualization for our Autonomous Navigation robot.</p><p>i will describe the setup and usage of RViz2 for visualizing data during the autonomous navigation test using ROS 2 Humble, Gazebo Classic, and SLAM Toolbox. All visualizations were configured manually witshin RViz2 to monitor the TekBot&#39;s state, sensor readings, and navigation behavior.</p><p>## Installing RViz2 on Ubuntu 22.04 (ROS 2 Humble)</p><p>Ensure ROS 2 Humble is installed on the system.</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>In RViz2 is installed by default with the ROS 2 desktop version. If not, install it manually:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ros-humble-rviz2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Source the ROS 2 workspace before launching: source ./tekbot_sim/install/setup.bash</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Launch RViz2 using:</span></span>\n<span class="line"><span>```bash</span></span>\n<span class="line"><span>rviz2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>I used the official tekbot_sim repository which contains both the robot description and the simulation environment. The maze simulation was launched using:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maze_solving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tekbot_maze.launch.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This command starts the simulation in Gazebo Classic and spawns the TekBot robot in a pre-defined maze. We used SLAM Toolbox to map the environment and localize the robot.</p><p>I configured RViz2 to visualize different data streams relevant to the robot&#39;s navigation process. I manually added several display types and linked them to the correct ROS 2 topics.</p><p>when we launch rviz2 you To add display types on the left panel</p><h3 id="robotmodel" tabindex="-1">RobotModel <a class="header-anchor" href="#robotmodel" aria-label="Permalink to &quot;RobotModel&quot;">​</a></h3><p>robot_description (parameter)</p><h3 id="tf" tabindex="-1">TF <a class="header-anchor" href="#tf" aria-label="Permalink to &quot;TF&quot;">​</a></h3><p>Shows the transform frames between robot components <code>/tf</code></p><h3 id="laserscan" tabindex="-1">LaserScan <a class="header-anchor" href="#laserscan" aria-label="Permalink to &quot;LaserScan&quot;">​</a></h3><p>Visualizes LIDAR data used for obstacle detection <code>/scan</code></p><h3 id="odometry" tabindex="-1">Odometry <a class="header-anchor" href="#odometry" aria-label="Permalink to &quot;Odometry&quot;">​</a></h3><p>Shows the robot’s estimated position based on wheel encoders <code>/odom</code></p><h3 id="path" tabindex="-1">Path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;Path&quot;">​</a></h3><p>Displays the path calculated by the pathfinding algorithm <code>/plan</code></p><h3 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h3><p>Displays the SLAM-generated 2D occupancy grid <code>/map</code> The fixed frame that we use in RViz2 is<code>base_link</code></p><p>This is the test Procedure</p><ul><li>Cloned and built the tekbot_sim repository using and launch the differents nodes</li><li>Launched the robot in Gazebo using the provided launch file.</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/charif-tekbot/tekbot_sim.git</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maze_solving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tekbot_maze.launch.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Launched RViz2 in a separate terminal session.</li><li>Manually added all necessary display types in RViz2 <a href="https://docs.ros.org/en/humble/Tutorials/Intermediate/RViz/RViz-User-Guide/RViz-User-Guide.html" target="_blank" rel="noreferrer">Check here to learn more</a></li><li>Verified that each topic was publishing data by using ros2 topic echo</li><li>Used SLAM Toolbox to generate the map and track robot localization.</li></ul><p>Conclusion Through RViz2, I was able to monitor the robot’s pose, the SLAM map, sensor input, and planned navigation path. This setup was essential for debugging and validating the robot’s behavior in the maze environment.</p>',33)]))}const b=e(n,[["render",o]]);export{u as __pageData,b as default};
