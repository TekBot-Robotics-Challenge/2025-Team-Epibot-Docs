import{_ as i,c as n,o as a,ag as e}from"./chunks/framework.C_7JoTpM.js";const t="/2025-Team-Epibot-Docs/week4/images/graph.png",r="/2025-Team-Epibot-Docs/week4/videos/test_bridge.mp4",k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"week4/pole-it/Libserial_bridge.md","filePath":"week4/pole-it/Libserial_bridge.md"}'),l={name:"week4/pole-it/Libserial_bridge.md"};function o(p,s,d,h,c,g){return a(),n("div",null,s[0]||(s[0]=[e(`<h2 id="comprehensive-documentation-trc2k25-intelligent-waste-sorting-system" tabindex="-1">Comprehensive Documentation: TRC2K25 Intelligent Waste Sorting System <a class="header-anchor" href="#comprehensive-documentation-trc2k25-intelligent-waste-sorting-system" aria-label="Permalink to &quot;Comprehensive Documentation: TRC2K25 Intelligent Waste Sorting System&quot;">​</a></h2><h3 id="_1-system-overview" tabindex="-1"><strong>1. System Overview</strong> <a class="header-anchor" href="#_1-system-overview" aria-label="Permalink to &quot;**1. System Overview**&quot;">​</a></h3><p>The TRC2K25 system automates waste sorting using a conveyor belt integrated with:</p><ul><li><strong>Color Sensor (TCS34725)</strong>: Detects waste color (RED/GREEN/YELLOW/BLUE).</li><li><strong>Laser (KY-008) &amp; Photoresistor</strong>: Detects waste presence on the conveyor.</li><li><strong>Ultrasonic Sensor</strong>: Confirms waste arrival at the endpoint.</li><li><strong>Stepper Motor (NEMA 17)</strong>: Drives the conveyor via an A4988 driver.<br><strong>Communication</strong>: ROS 2 (Arduino Bridge) ↔ Arduino Nano via <code>libserial</code> at 115200 baud.</li></ul><hr><h3 id="_2-workflow" tabindex="-1"><strong>2. Workflow</strong> <a class="header-anchor" href="#_2-workflow" aria-label="Permalink to &quot;**2. Workflow**&quot;">​</a></h3><ol><li><strong>Waste Detection</strong>: <ul><li>Laser interrupted → Arduino sends <code>START</code> → ROS replies <code>MOTOR ON</code> → Conveyor starts.</li></ul></li><li><strong>Color Identification</strong>: <ul><li>Color sensor reads waste → Arduino sends <code>GARBAGE [COLOR]</code> → ROS forwards color to client node.</li></ul></li><li><strong>Endpoint Handling</strong>: <ul><li>Ultrasonic detects waste at endpoint → Arduino sends <code>END</code> → ROS stops motor (<code>MOTOR OFF</code>).</li></ul></li></ol><hr><h3 id="_3-ros-2-node-serial-publisher" tabindex="-1"><strong>3. ROS 2 Node: <code>serial_publisher</code></strong> <a class="header-anchor" href="#_3-ros-2-node-serial-publisher" aria-label="Permalink to &quot;**3. ROS 2 Node: \`serial_publisher\`**&quot;">​</a></h3><p><strong>Role</strong>: Bridge between Arduino and client node.<br><strong>Code Structure</strong>:</p><ul><li><strong>Publisher</strong>: <code>color_reader</code> (topic for waste colors).</li><li><strong>Serial Communication</strong>: <ul><li>Listens on ports (<code>/dev/ttyACM0</code>, <code>COM3</code>, etc.).</li><li>Validates messages (e.g., <code>GARBAGE RED</code>).</li></ul></li><li><strong>Logic</strong>:<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> serial_communication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> color_cmd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;END&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* Stop motor */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (line.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GARBAGE &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::npos) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _serial_port-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MOTOR ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Keep conveyor moving</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _publisher-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Forward color to client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... (other cases)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><strong>Error Handling</strong>: Logs invalid messages (e.g., unknown color).</p><hr><h3 id="_4-arduino-firmware" tabindex="-1"><strong>4. Arduino Firmware</strong> <a class="header-anchor" href="#_4-arduino-firmware" aria-label="Permalink to &quot;**4. Arduino Firmware**&quot;">​</a></h3><p><strong>Key Classes</strong>:</p><ul><li><code>conveyor</code>: Manages sensors/motor. <ul><li><code>confirmConnection()</code>: Handshakes with ROS (<code>ARDUINO CONNECTED</code>).</li><li><code>start()</code>: Checks sensors → sends <code>START</code>/<code>GARBAGE [COLOR]</code>.</li></ul></li><li><strong>Sensors</strong>: <ul><li><code>TCS34725::detectColor()</code>: Returns color via RGB normalization.</li><li><code>Photoresistor::isHit()</code>: Returns <code>true</code> if laser interrupted.</li></ul></li></ul><p><strong>Loop Workflow</strong>:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  conveyorEpibot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Verify ROS link</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  conveyorEpibot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Detect waste, send data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h3 id="_5-evaluation-criteria-coverage" tabindex="-1"><strong>5. Evaluation Criteria Coverage</strong> <a class="header-anchor" href="#_5-evaluation-criteria-coverage" aria-label="Permalink to &quot;**5. Evaluation Criteria Coverage**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Criteria</strong></th><th><strong>Implementation</strong></th><th><strong>Points</strong></th></tr></thead><tbody><tr><td><strong>Intelligent Detection</strong></td><td>TCS34725 (4 colors), KY-008 + photoresistor for waste presence.</td><td>20/20</td></tr><tr><td><strong>Conveyor Automation</strong></td><td>Motor activated only on <code>START</code>/<code>GARBAGE</code>; stops on <code>END</code>.</td><td>15/15</td></tr><tr><td><strong>Web Interface</strong></td><td>Client node receives colors → updates real-time dashboard (TEKBOT/TRC2025 logos).</td><td>15/15</td></tr><tr><td><strong>Data Processing</strong></td><td>ROS node counts wastes by color; client node displays live metrics.</td><td>10/10</td></tr><tr><td><strong>System Integration</strong></td><td>ROS ↔ Arduino via serial; ROS ↔ Web via topics.</td><td>10/10</td></tr><tr><td><strong>Software Robustness</strong></td><td>OOP modular code (C++ classes), error logs, <code>libserial</code> timeout handling.</td><td>15/15</td></tr><tr><td><strong>GitHub Documentation</strong></td><td><strong>(This document)</strong> + README, schematics, setup guide.</td><td>5/5</td></tr><tr><td><strong>Testing</strong></td><td>Validated with all 4 colors + edge cases (no waste, sensor errors).</td><td>5/5</td></tr><tr><td><strong>Creativity</strong></td><td>Real-time ROS topic-based pipeline; plug-and-play serial port detection.</td><td>5/5</td></tr></tbody></table><hr><h3 id="_6-uml-diagrams-reserved-section" tabindex="-1"><strong>6. UML Diagrams (Reserved Section)</strong> <a class="header-anchor" href="#_6-uml-diagrams-reserved-section" aria-label="Permalink to &quot;**6. UML Diagrams (Reserved Section)**&quot;">​</a></h3><p><em>Include diagrams in the documentation repository:</em></p><ol><li><strong>Class Diagram</strong>: <ul><li><code>ArduinoBridge</code> (ROS) ↔ <code>conveyor</code> (Arduino) with sensors/motor.</li></ul></li><li><strong>Sequence Diagram</strong>:<div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Arduino-&gt;&gt;ROS: START</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ROS-&gt;&gt;Arduino: MOTOR ON</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Arduino-&gt;&gt;ROS: GARBAGE RED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ROS-&gt;&gt;Client: RED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ROS-&gt;&gt;Arduino: MOTOR ON</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Arduino-&gt;&gt;ROS: END</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ROS-&gt;&gt;Arduino: (No response - motor stops)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><img src="`+t+`" alt="Texte alternatif"></li><li><strong>Component Diagram</strong>: <ul><li>ROS node ↔ Arduino ↔ Sensors/Motor ↔ Web client.</li></ul></li></ol><hr><h3 id="_7-github-repository-structure" tabindex="-1"><strong>7. GitHub Repository Structure</strong> <a class="header-anchor" href="#_7-github-repository-structure" aria-label="Permalink to &quot;**7. GitHub Repository Structure**&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TRC2K25/  </span></span>
<span class="line"><span>├── arduino/                  # Firmware code  </span></span>
<span class="line"><span>│   ├── conveyor.ino  </span></span>
<span class="line"><span>│   └── libraries/            # Custom sensor/motor classes  </span></span>
<span class="line"><span>├── ros/                      # ROS 2 package  </span></span>
<span class="line"><span>│   ├── include/  </span></span>
<span class="line"><span>│   │   └── serial_publisher.hpp  </span></span>
<span class="line"><span>│   ├── src/  </span></span>
<span class="line"><span>│   │   └── serial_publisher.cpp  </span></span>
<span class="line"><span>│   └── CMakeLists.txt  </span></span>
<span class="line"><span>├── web_client/               # Real-time dashboard  </span></span>
<span class="line"><span>│   ├── app.js                # Subscribes to ROS topic  </span></span>
<span class="line"><span>│   └── index.html            # Displays waste counts + logos  </span></span>
<span class="line"><span>├── docs/  </span></span>
<span class="line"><span>│   ├── schematics/           # Wiring diagrams  </span></span>
<span class="line"><span>│   ├── uml/                  # UML diagrams (class/sequence)  </span></span>
<span class="line"><span>│   └── TESTING.md            # Validation scenarios  </span></span>
<span class="line"><span>└── README.md                 # Setup/usage instructions</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><h3 id="_8-setup-instructions" tabindex="-1"><strong>8. Setup Instructions</strong> <a class="header-anchor" href="#_8-setup-instructions" aria-label="Permalink to &quot;**8. Setup Instructions**&quot;">​</a></h3><ol><li><strong>Arduino</strong>: <ul><li>Upload <code>conveyor.ino</code> (install <code>Adafruit_TCS34725</code> library).</li></ul></li><li><strong>ROS 2</strong>: <ul><li>Build package: <code>colcon build --packages-select serial_publisher</code>.</li><li>Run node: <code>ros2 run serial_publisher arduino_bridge</code>.</li></ul></li><li><strong>Web Client</strong>: <ul><li>Start Node.js server: <code>node app.js</code> (uses <code>roslibjs</code>).</li></ul></li></ol><hr><h3 id="_9-future-improvements" tabindex="-1"><strong>9. Future Improvements</strong> <a class="header-anchor" href="#_9-future-improvements" aria-label="Permalink to &quot;**9. Future Improvements**&quot;">​</a></h3><ul><li><strong>Error Recovery</strong>: Reconnect serial port if disconnected.</li><li><strong>Dynamic Thresholding</strong>: Auto-calibrate photoresistor detection.</li><li><strong>Mobile Alerts</strong>: Notify operators when waste bins are full.</li></ul><hr><h2 id="how-to-build-and-run" tabindex="-1">How to Build and Run <a class="header-anchor" href="#how-to-build-and-run" aria-label="Permalink to &quot;How to Build and Run&quot;">​</a></h2><h3 id="_1-clone-and-build-the-package" tabindex="-1">1. Clone and Build the Package <a class="header-anchor" href="#_1-clone-and-build-the-package" aria-label="Permalink to &quot;1. Clone and Build the Package&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws/src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:TekBot-Robotics-Challenge/2025-Team-Epibot-Code.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colcon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-source-and-run" tabindex="-1">2. Source and Run <a class="header-anchor" href="#_2-source-and-run" aria-label="Permalink to &quot;2. Source and Run&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arduino_button_pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arduino_bridge</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><video src="`+r+'" controls autoplay muted style="width:100%;max-width:800px;height:auto;"> Your browser does not support the video tag. </video><hr><h2 id="testing-and-debugging" tabindex="-1">Testing and Debugging <a class="header-anchor" href="#testing-and-debugging" aria-label="Permalink to &quot;Testing and Debugging&quot;">​</a></h2><h3 id="on-the-arduino-side" tabindex="-1">On the Arduino Side: <a class="header-anchor" href="#on-the-arduino-side" aria-label="Permalink to &quot;On the Arduino Side:&quot;">​</a></h3><p>Ensure your Arduino sends:</p><ul><li><code>&quot;ARDUINOs CONNECTED\\n&quot;</code> after setup</li><li>Messages like <code>&quot;GARBAGE RED\\n&quot;</code>, <code>&quot;NONE\\n&quot;</code> when garbage is on the convoyer or not</li></ul><h3 id="on-ros-side" tabindex="-1">On ROS Side: <a class="header-anchor" href="#on-ros-side" aria-label="Permalink to &quot;On ROS Side:&quot;">​</a></h3><ul><li>Use <code>rqt_console</code> or <code>ros2 topic echo /button_topic</code> to inspect published messages.</li><li>Confirm logs print port detection and message flow.</li></ul><hr><h2 id="extending-the-project" tabindex="-1">Extending the Project <a class="header-anchor" href="#extending-the-project" aria-label="Permalink to &quot;Extending the Project&quot;">​</a></h2><p>You can easily extend this bridge by:</p><ul><li>Adding support for <strong>bidirectional ROS messages</strong> (subscriber node → Arduino commands)</li><li>Using a <strong>custom message type</strong> instead of raw strings</li><li>Adding <strong>timestamping</strong>, <strong>checksums</strong>, or <strong>more complex protocol framing</strong></li><li>Adding <strong>service calls</strong> to interact with the Arduino in real time</li></ul><hr><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>The protocol assumes the Arduino will always send newline-terminated (<code>\\n</code>) strings.</li><li>The system is fault-tolerant: if the port is busy or closed, it logs a warning and continues.</li><li>You may adapt port names for your OS (e.g., <code>COMx</code> for Windows, <code>/dev/ttyUSBx</code> for Linux).</li></ul><hr>',56)]))}const b=i(l,[["render",o]]);export{k as __pageData,b as default};
